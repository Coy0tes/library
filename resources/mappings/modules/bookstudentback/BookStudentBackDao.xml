<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jeeplus.modules.bookstudentback.dao.BookStudentBackDao">
    
	<sql id="bookStudentBackColumns">
		a.id AS "id",
		a.mainid AS "mainid.id",
		a.bookid AS "bookid.id",
		a.isbn AS "isbn",
		a.ssh AS "ssh",
		a.booktype AS "booktype",
		a.name AS "name",
		a.author AS "author",
		a.cbs AS "cbs",
		a.price AS "price",
		a.jcsj AS "jcsj",
		a.yhrq AS "yhrq",
		a.ghsj AS "ghsj",
		a.cqts AS "cqts",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="bookStudentBackJoins">
	</sql>
	
    
	<select id="get" resultType="BookStudentBack" >
		SELECT 
			<include refid="bookStudentBackColumns"/>
		FROM book_student_detail a
		<include refid="bookStudentBackJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="BookStudentBack" >
		SELECT 
			<include refid="bookStudentBackColumns"/>
		FROM book_student_detail a
		<include refid="bookStudentBackJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="BookStudentBack" >
		SELECT 
			<include refid="bookStudentBackColumns"/>
		FROM book_student_detail a
		<include refid="bookStudentBackJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.create_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO book_student_detail(
			id,
			mainid,
			bookid,
			isbn,
			ssh,
			booktype,
			name,
			author,
			cbs,
			price,
			jcsj,
			yhrq,
			ghsj,
			cqts,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag
		) VALUES (
			#{id},
			#{mainid.id},
			#{bookid.id},
			#{isbn},
			#{ssh},
			#{booktype},
			#{name},
			#{author},
			#{cbs},
			#{price},
			#{jcsj},
			#{yhrq},
			#{ghsj},
			#{cqts},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE book_student_detail SET 	
			mainid = #{mainid.id},
			bookid = #{bookid.id},
			isbn = #{isbn},
			ssh = #{ssh},
			booktype = #{booktype},
			name = #{name},
			author = #{author},
			cbs = #{cbs},
			price = #{price},
			jcsj = #{jcsj},
			yhrq = #{yhrq},
			ghsj = #{ghsj},
			cqts = #{cqts},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM book_student_detail
		WHERE id = #{id}
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE book_student_detail SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	
	<!-- 根据实体名称和字段名称和字段值获取唯一记录 -->
	<select id="findUniqueByProperty" resultType="BookStudentBack" statementType="STATEMENT">
		select * FROM book_student_detail  where ${propertyName} = '${value}'
	</select>
	
</mapper>